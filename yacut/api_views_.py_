import re

from flask import jsonify, request

from . import app, db
from .error_handlers import APIUsageError
from .exceptions import (OriginalRequiredError, ShortExistsError,
                         ValidateShortError)
from .forms import SHORT_ID_NAME_ERROR, URLForm
from .models import URL_map
from .settings import MAX_SHORT_ID_LENGTH, SHORT_ID_PATTERN

EMPTY_REQUEST_ERROR = 'Отсутствует тело запроса'
URL_FIELD_REQUIRED_ERROR = '"url" является обязательным полем!'
SHORT_ID_NOT_FOUND_ERROR = 'Указанный id не найден'
# pass tests/test_endpoints.py::test_url_already_exists:
UNIQUE_SHORT_ID_ERROR = 'Имя "{short}" уже занято.'


@app.route('/api/id/', methods=['POST'])
def map_short_id_to_url():
    data = request.get_json()
    if not data:
        raise APIUsageError(EMPTY_REQUEST_ERROR)
    try:
        url_map = URL_map.add_to_db(URL_map.from_dict())
    except ValidateShortError:
        raise APIUsageError(SHORT_ID_NAME_ERROR)
    except ShortExistsError:
        raise APIUsageError(UNIQUE_SHORT_ID_ERROR)
    except OriginalRequiredError:
        raise APIUsageError(URL_FIELD_REQUIRED_ERROR)
    return jsonify(url_map.to_dict()), 201


@app.route('/api/id/<string:short>')
def get_url(short):
    # TODO URL_map.validate_short(short)
    if len(short) > MAX_SHORT_ID_LENGTH or not URL_map.is_short_exists(short):
        raise APIUsageError(SHORT_ID_NOT_FOUND_ERROR, 404)
    return jsonify(URL_map.query.filter_by(short=short).first().url_to_dict())
    # FIXME
